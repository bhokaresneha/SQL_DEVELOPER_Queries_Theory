
select * from HR.employees where employee_id=&&id1
=> double and percent is used then it required each time id 
**********************************************************************
select * from HR.employees where employee_id=&&id1
=> double and percent is used then it only one time ask for id
second time it doesnot want id from user
***********************************************************************
examples=>
1]taking input static=>
		declare
	 		a number:=10;
 
		 begin
 
 			dbms_output.put_line(a);
		 end;

2]
		 set serveroutput on ;

3]taking input from user and make addition of that
 
		declare
 			a number:=&a;
			 b number:=&b;
  			c number;
		 begin
 			c:=a+b;
 			dbms_output.put_line('add='||c);
		 end;

4]select salary of employee whos id is given by user
		declare
    			  eid number:=&eid;
    			  sal number;

		 begin
     			 select salary into sal from hr.employees where employee_id=eid;
 				dbms_output.put_line('salary='||sal);
 		end;
5]


		 
		declare
      			eid number:=&eid;
     			eid1 number:=&eid1;

			sal number;
      			sal1 number;

		 begin
      			
			select salary into sal from hr.employees where employee_id=eid;
    			select salary into sal1 from hr.employees where employee_id=eid1;
     
     		      	if(sal>=sal1)then
         			begin
                			dbms_output.put_line(eid||'salary of emp is greater='||sal);
        			end;   
       		     	else
        			 begin
   				   dbms_output.put_line(eid1 ||'salary of emp1 is greater='||sal1);
           			end;
           	  	end if;
           		dbms_output.put_line(eid ||'salry of empis'||sal||eid1||'salary of emp1 is'||sal1);
 		end;

6] for loop
		
		  declare
               		 i number;
                 begin
                	for i in 11..20
               		 loop
               			 dbms_output.put_line(i);
               		 end loop;
                 end;

7]simple loop

            declare
                i number:=1;
            begin
                  loop
                   	 dbms_output.put_line(i);
                   	 i:=i+1;
                   	 exit when i>10;
                  end loop;
            end;
8]while loop

 
             declare
                	i number:=1;
             begin
                	while(i<10)
               			 loop
               				 dbms_output.put_line(i);
               				 i:=i+1;
                		end loop;
                	end;
                
9]count
 
              declare
             		 n number:=&n;
              		cnt number:=0;
             		 rem number;
              begin
              		while(n!=0)
              			loop
             			 cnt:=cnt+1;
             			 n:=trunc(n/10);
              			end loop;
              		dbms_output.put_line(cnt);
              end;
inbuild=>                
%type and % rowtype

 %type is used when we dont know about single variables datatype
 %rowtype is used when we dont know about datatypes of the data 

10] display salary of emp whoes empid id 101 without knowing the datatype of salary

	 declare
              sal hr.employees.salary%type;
         begin
              select salary into sal from hr.employees where employee_id=101;
              dbms_output.put_line(sal);
         end; 
         
11]dispay the information of emp where empid =101 (display whole row without knowing the datatypes of all information using %rowtype)
 		declare
             		 emp hr.employees%rowtype;
              	begin
              		select * into emp from hr.employees where employee_id=101;
              		dbms_output.put_line(emp.employee_id||''||emp.first_name||''||emp.salary);
              	end; 


userdefine=>
record->


syntax=>
		 declare 
			type type_name is record
			{
			  declaration;
			};
			 object_of_type type_name; 
				


eg=1]
		 declare 
			type emptype is record
			(
			  name varchar(100),
        		   salary number
			);
     		 e emptype; 
				
       		 begin
        		select first_name||''||last_name,salary into e.name,e.salary from hr.employees where employee_id=101;
              		dbms_output.put_line(e.name||''||e.salary);
              	end;
-------------------------------------------------------------------------------------------------------------------------------------------------
cursor
==============
cursor is like pointer
steps:
1]create 
2] open
3]fetch
4]close
            

ex=>
1]using cursor
        
      
              
              declare
              cursor empcursor is
              select employee_id,first_name from hr.employees;
              
              eid number;
              fn varchar(100);
              begin
              open empcursor;
              loop
              fetch empcursor into eid,fn;
              dbms_output.put_line(eid||''||fn);
              exit when empcursor%notfound;
              end loop;
              close empcursor;
              end;

2]combine record and cursor=>
                 
              
              declare
              cursor empcursor is
              select employee_id,first_name from hr.employees;
             type emptype is record
              (
                eid number,
              fn varchar(100)
              );
               e emptype;  
              
              begin
              open empcursor;
              loop
              fetch empcursor into e.eid,e.fn;
              dbms_output.put_line(e.eid||''||e.fn);
              exit when empcursor%notfound;
              end loop;
              close empcursor;
              end;
  
              
*************************************************************************************************************************************
stored procedure=>
it is a block in which query compile and permenantly stored 

eg:
	 create or replace  procedure spdemo
	as
	begin
	dbms_output.put_line('welcome to store procedure');
	end;

for execution=>
			exec spdemo   

2]
      select * from students;
                    
                    create table students(rno number,sname varchar(20),marks number);


   create or replace  procedure stud(r number,s varchar,m number)
        as
                      
            begin
        insert into  students values(r,s,m);  
                    end;
                    
     exec stud(10,'abc',20)               


 3] all in one operations

 
 
	 create or replace procedure ppp1(type varchar,r number ,n varchar,m number,c out  number )
 	 as
 		begin
 			if(type='insert')then
			 begin
  				insert into students values(r,n,m);
 
			  end;
  			end if;

			if(type='update')then
			 begin
				  update students set sname=n,marks=m where rno=r;
 
 			 end;
  			end if; 
			if(type='delete')then
 			begin
 				 delete from students  where rno=r;
			  end;
  			end if; 
	 select count(rno)into c from students;   
  	end;


  
	  declare
		res number;
		begin
 			ppp1('insert',10,'shalu ',30,res );
			dbms_output.put_line(res);

		end;



FUNCTION=>



create or replace function fn(a number)
 return varchar
 as
 
 r number;
 begin 
 r:=a*a;
 return('square='||r);
 end;
 
 select fn(10)from dual;
 







FUNCTION+procedure=>




create or replace function fns
 return number
 as
 r number;
 begin
 select max(rno)into r from students;
 if(r is null)then
 r:=0;
 end if;
 r:=r+1;
 return r;
 end;


select * from students;
select fns() from dual;


create or replace procedure ppp1(type varchar,r number ,n varchar,m number,c out  number )
 as
 begin
 if(type='insert')then
 begin
  insert into students values(fns,n,m);
 
  end;
  end if;
if(type='update')then

 begin
  update students set sname=n,marks=m where rno=r;
 
  end;
  end if; 
if(type='delete')then
 begin
  delete from students  where rno=r;
  end;
  end if; 
 select count(rno)into c from students;   
  end;


  
  declare
res number;
begin
 ppp1('insert',10,'shalu333 ',30,res );
dbms_output.put_line(res);
end;








trigger=>event  handling using trigger

to take backup

rdbms


data=any kind of info

database =logical storage of data

dbms=system or s/w throw which manage the data storage in various format

rdbms=system or s/w throw which manage the data store in table format

products=>
		oracle
		ms sql server
		mysql
		DB2
sql= it is pure database language work on relational data


3 layers
presentation,business,data access

business application layes=
1tire archi=>
2tire archi=>also called client-server archi
-1 fat client thin server
-2 thin client fat server
	
3tire archi=> 

n-tire archi	=>
replica concept is used

data centric ,uicentric


ORACLE=>>>>>>>>>>>>


DDL= CREATE ,ALTER.DROP,TRUNCATE(WORKING ON STRUCTURE)
DML= INSERT ,UPDATE,DELETE  (WORKING ON RECORD)
DCL=REVOKE,GRAND(WORKING ONSECURITY)
DQL=SELECT(READING DATA)(ALSO CALLED QUERY) 

DELETE -USED RECORD RESTORED
TRUNCATE-UDES RECORD NOT RESTORED


DD-MON-YY YY ALSO WRITEN I RR
0-49=CURRENT CENTURY
50-99=PAST CENTURY

IF WE GIVE 20-MON-18
18IS BETWEEN 0-18 SO YEAR IN CURRENT CENTURY 2018




IF WE WANT PERTICULAR DATA CALLED THAT PROJECTION

OPERATORS=>
ARITHMATIC=(+,-,*,/)
COMARISSION(>,<,>=,<=,=,!=)
LOGICAL(AND, OR ,NOT)
RANGE(BETWEEN,NOT BETWEEN)
PATTERN MATCHING(LIKE)



FUNCTIONS=>

CHARACTER => 1.CASE MANUPULATION       2.CHARACTER MANIPULATION
		I] UPPER  CASE			LENGTH()				
		II]LOWER CASE			CONCAT()
		III]INIT CASE			SUBSTR()
						INSTR()
						LPAD()
						RPAD()
						TRIM()
						REPLACE()
						REVERSE()
	
NUMBER=>	
	NUMBER()
	MOD()-remainder	
	TRUN()
	ROUND()		
DATE=>(sysdate,localtimestamp,current_timestamp)
	MONTHS_BETWEEN()
	ADD_MONTHS()
yy,yyyy,year
mm,mon,month
dd,d
select to_char(sysdate,'ddspth month') from dual=>twenty-fifth july
select to_char(sysdate,'dspth month') from dual

	
RANKING=>
ROW_NUMBER()=>UNIC NO
RANK()=>SAME NO GET SAME RANK
DANCE_RANK()=>IT GIVES CONTINIOUS RANKING WITH  SAME RECORD GET SAME RANK
NTILE(3)=>3 IS GIVEN  SO  TOTAL NO OF ROWS DIVIDE BY 3 AND ANS IS COME THEN RANKING IS GIVEN 
EG 12 /3 THEN 1 RANK 4 TIME

select EMPLOYEE_ID, ROW_NUMBER() OVER (ORDER BY SALARY DESC) AS "RANK",
RANK() OVER (ORDER BY SALARY DESC)"RANK" FROM HR.EMPLOYEES


26/7/19
AGRGRIGATE FUNCTION=>giving only one line output
SUM AVG COUNT


SELECT COUNT(EMP_ID)FROM EMP=====ONLY 1 IS COMPARISIBLE

GROUP BY CLAUSE IS USED WHEN WE WANT TO USE AGGREGATE FUNCTION ON MORE THEN ONE
EG:
  SELECT GENDER ,COUNT(ROLLNO)FROM STUDENT
 GROUP BY GENDER

IF WE WANT MORE GROUPING CCOLUMN IS ALLOWED 
EG:
SELECT GENDER,NAME ,COUNT(ROLLNO)FROM STUDENT
 GROUP BY GENDER,NAME0

MULTIPLE SETS IN ONE GROUP FUCTION
=>

SELECT FIRST_NAME,JOB_ID,COUNT(MANAGER_ID) FROM HR.EMPLOYEES
GROUP BY
GROUPING SETS( (FIRST_NAME,JOB_ID),(JOB_ID))



WHERE CLAUSE IS USED ON NORMAL FUNCTION/COLUMN

HAVING CLAUSE IS USED ONLY ON THE GROUP BY CLAUSE






JOIN 


INNER JOIN=> USED TO RETRIVE ONLY MATCHING RECORDS

EQUIJOIN=> ONLY '=' IS USED WHILE COMPARING TWO COLUMNS

DIFFERENCE BETWEEN INNER AND EQUI JOIN=> INNER JOIN USED ANY OPERATER AND
 EQUIJOIN ONLY '=' IS USED WHILE COMPARING TWO COLUMNS


OUTER JOIN=>
LEFT OUTER,RIGHT OUTER,FULL OUTER JOIN

SELF JOIN=>TABLE JOIN ITSELF IS CALLED SELF JOIN
CROSS JOIN=>CARTITION  PRODUCT


NESTED QUERIES=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>....
SUB QUERY=>
1.SINGLE ROW SUBQUERY		2.MULTIPLE SUB QUERY


ALL=>GREATER THAN MAX
SELECT FIRST_NAME,SALARY FROM HR.EMPLOYEES
WHERE SALARY > ALL(SELECT SALARY FROM HR.EMPLOYEES
WHERE EMPLOYEE_ID=102) 

ANY=>GREATER THAN ANY VALUE
SELECT FIRST_NAME,SALARY FROM HR.EMPLOYEES
WHERE SALARY > ANY(SELECT SALARY FROM HR.EMPLOYEES
WHERE EMPLOYEE_ID=102) 




FINDING nth HIGHEST SALARY

SELECT * FROM(
SELECT SALARY ,DENSE_RANK() OVER(ORDER BY SALARY DESC)"DENSE" FROM HR.EMPLOYEES)
where dense=2


find dept no which maximum emp



*****************************************************************************************************************************************************************************
DDL=> CREATE ,DELETE DROP ,TRUNCATE

DATABASE OBJECT=>
1.TABLE=>
CREATE TABLE STUD(SNO NUMBER(10),NAME VARCHAR(20),DIV VARCHAR(20),
	CONSTRINT PK PRIMARY KEY (SNO)
	CONSTRINT UK  UNIQUE  (DIV))


	CONSTRAINTS=>
	1.NOT NULL
	2.PRIMARY KEY
				COMPOSITE KEY =>WE CAN CREATE PRIMEARY KEY USING ONE ORT MORE COLUMN TOGETHER 
	3.UNIQUE CONSTRAIN=>ONLY ALLOW UNIQUE VALUES WITH SOME NULL VALUE
	4.ALTER  
	5.FOREGINE KEY=> ALSO CALLED REFERENCE KEY
				-FOREGIN KEY WANT TO APPLY PRIMARY KEY MUST FOR THAT
			
		EG:
			CREATE TABLE STUD(SID NUMBER  CONSTRINT PK PRIMARY KEY,SNAME VARCHAR(20))
			CREATE TABLE  CITIES(CID NUMBER PRIMARY KEY,CNAME VARCHAR(20)CONSTRINT FK REFERENCE
				STUD(SID) ON DELETECASCADEON DELETE SET NULL)

2.VIEW
3.SEQUENCE
4.SYNONIUMS
5.INDEX










**************************************************************************
						ACID
***************************************************************************
A=AUTOMACITY--- EITHER 100% OR 0%
C=CONSISTENCY---CONTUNITY 
I=ISOLATION---- SEPRATED ONE TRASACTION FAIL THAT NOT AFFECT ANOTHER
D=DURABILITY----WHAT CHAGES SHOULD DO THAT STORED PERMENANTLY


COMMIT ==PERMENATLY SAVED
ROLLBACK=> 

SAVEPOINT=>KIND OF BREAK POINT
		EG:ROLLBACK TO  SAVEPOINT A
		COMMIT  TO  SAVEPOINT A


**********************************************************VIEW************************************
ITS A VIRTUAL TABLE/SHADOW OF TABLE
IT IS USED TO REDUCE COMPLEXITY OF QUERY

SYNATAX:
 CREATE OR REPLACE VIEW VIEW_NAME
 AS SALES(NAME VARCHAR(20),DEPT_NAME FROM HR .EMPLOYEES E JOIN HR.DEPARTMENT ON E.DEPT_ID=D.DEPT_ID;


SELECT * FROM VIEW_NAME;


*********************************************************INDEX/*********************
EG:CREATE INDEX ON STUD(ADDRESS)

DONT CREATE INDEX ON FREQUENTLY UPDATED
CREATE INDEX ON COLUMN WHICH IS FREQUENTLY IN USE

************************************SEQUENCE**************************

CREATE SEQUENCE SEQ1
START WITH1
INCREASED BY 1
MAXVALUE 1000
EG: INSERT INTO STUD VALUES(SEQL1.NEXTVAL,'ABC');


=>NEXT VAL
=>CURRENT VAL 


SELECT SEQL1.NEXTVAL FROM DUAL

SELECT SEQL1.CURRENTVAL FROM DUAL

**************************************SYNANUM***********************
GIVE TABLE NIKE NAME

EG : CREATE SYNANUM EMP FOR HR.EMPLOYEES


********************GRANT/REVOKE******************************************************
CREATING NEW USER FOR ORACLE
	eg:
		create user ciit identified by ciit123 
PERMISSIONS
grant  CONNECT,RESOURCE to ciit 
CREATE ROLE ADMIN
GRANT CREATE SESSION ,CREATE TABLE TO ADMIN
GRANT ADMIN TO USER1
===DELETE THE PURMISSION====
=>REVOKE ADMIN FROM USER1


=>IF U FORGOT U R SYSTEM PASS  THEN U CAN SET BLANK AND THEN ATLER THAEPASS
		--SYS AS SYSDBM